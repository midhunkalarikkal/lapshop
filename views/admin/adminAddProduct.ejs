<!-- Admin navbar -->
<%-include("../adminpartials/admin_navbar.ejs")%>

<head>
    <!-- Css for the admin data edit form -->
    <link rel="stylesheet" href='/static/css/admin_dataEdit.css' type="text/css">

    <!-- Ensure jQuery is loaded -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Ensure Bootstrap is loaded -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css">

    <!-- Edit start -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css"
    />
    <!-- Edit end -->

    <!-- Custom css -->
    <style>
        input[type="file"]{
            display: none;
        }

        .file-label{
            display: block;
            position: relative;
            color: white;
            font-size: 18px;
            text-align: center;
            padding: 12px 0;
            margin: auto;
            border-radius: 5px;
            cursor: pointer;
        }

        .num-of-files{
            text-align: center;
            margin: 20px 0 30px 0;
        }

        #images{
            position: relative;
            margin: auto;
            display: flex;
            flex-direction: row;
            justify-content: space-evenly;
            gap: 20px;
            flex-wrap: wrap;
        }

        figure{
            position: relative;
            width: 25%;
        }
        
        img{
            width: 100%;
        }

        figcaption{
            text-align: center;
            font-size: 13px;
            margin-top: 3px;
        }

        .delete-btn {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(255, 0, 0, 0.7);
                color: white;
                border: none;
                border-radius: 50%;
                width: 30px;
                height: 30px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 18px;
                z-index: 1;
            }
                

        /* Edit start */
        .wrapper {
        background-color: #ffffff;
        padding: 2em 3em;
        border-radius: 0.5em;
        }

        .container-cropper .image-container,
        .container-cropper .preview-container {
            width: 100%;
            height: 100%;
        }

        input[type="file"] {
        display: none;
        }

        .cropper-label {
        display: block;
        position: relative;
        font-size: 16px;
        text-align: center;
        width: 250px;
        padding: 10px 0;
        border-radius: 0.3em;
        margin: 16px auto;
        cursor: pointer;
        }

        img {
        display: block;
        max-width: 100%;
        }

        .image-container {
        width: 60%;
        margin: 0 auto;
        }

        .btns {
        display: flex;
        justify-content: center;
        gap: 1em;
        margin-top: 1em;
        }

        .btns button {
        font-size: 1em;
        }

        .btns a {
        border: 2px solid #025bee;
        background-color: #025bee;
        color: #ffffff;
        text-decoration: none;
        padding: 1em;
        font-size: 1em;
        border-radius: 0.3em;
        }

    </style>
</head>

<body>
    <section class="view">
        <div class="container d-flex align-items-center justify-content-center">
            <div class="main col-12 col-lg-10 m-3 mt-5">
                <!-- /admin/addProduct -->
                <!-- method="POST" enctype="multipart/form-data" -->
                <form action="" enctype="multipart/form-data">
                    <div class="p-5">
                        <h4 class=" fs-3 mb-4" style="color: #0f1923;">Add new product</h4>
                        <div class="input-box d-md-flex">
                            <div class="col-12 col-md-6">
                                <div class="mb-3 col-md-10">
                                    <label for="productName" class="form-label">Product name</label>
                                    <input type="text" class="form-control" name="productName" id="productName" value="" required oninput="validateProductName()">
                                    <span id="productNameError" class="text-danger"></span>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productBrand" class="form-label">Product Brand</label>
                                    <select class="form-select" name="productBrand" id="productBrand" required>
                                        <option value="" selected disabled>Select Brand</option>    
                                        <% brands.forEach(brand => { %>
                                            <option value="<%= brand._id %>">
                                                <%= brand.name%>
                                            </option>
                                           <% }) %> 
                                    </select>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productCategory" class="form-label">Product category</label>
                                    <select class="form-select" name="productCategory" id="productCategory" required> 
                                        <option value="" selected disabled>Select Category</option>   
                                        <% categories.forEach(category => { %>
                                            <option value="<%= category._id %>">
                                                <%= category.name%>
                                            </option>
                                           <% }) %> 
                                    </select>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productDescription" class="form-label">Product description</label>
                                    <textarea class="form-control" name="productDescription" id="productDescription" rows="5" required oninput="validateDesc()" style="resize: vertical;"   ></textarea>
                                    <span id="productDescError" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="col-12 col-md-6">
                                <div class="mb-3 col-md-10">
                                    <label for="productColour" class="form-label">Product colour</label>
                                    <input type="text" class="form-control" name="productColour" id="productColour" value="" required oninput="validateColor()">
                                    <span id="productColorError" class="text-danger"></span>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productStock" class="form-label">Product Stock</label>
                                    <input type="number" class="form-control" min="1" name="productStock" id="productStock" value="" required oninput="validateStock()">
                                    <span id="productStockError" class="text-danger"></span>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productRealPrice" class="form-label">Product real price</label>
                                    <input type="number" class="form-control" min="1000" name="productRealPrice" id="productRealPrice" value="" required oninput="validateRealPrice()">
                                    <span id="productRealPriceError" class="text-danger"></span>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productfferPrice" class="form-label">Product offer price</label>
                                    <input type="number" class="form-control" min="1000" name="productOfferPrice" id="productOfferPrice" value="" required oninput="validateOfferPrice()">
                                    <span id="productOfferPriceError" class="text-danger"></span>
                                </div>
                                <div class="mb-3 col-md-10">
                                    <label for="productDiscountPercentage" class="form-label">Product discount percentage</label>
                                    <input type="number" class="form-control" min="1" name="productDiscountPercentage" id="productDiscountPercentage" value="" required oninput="validateDiscount()">
                                    <span id="productDiscountError" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div>
                            <div class="wrapper shadow mt-5">
                                <div class="container container-cropper d-flex flex-column flex-md-row justify-content-center">
                                    <div class="col-md-6">
                                        <div class="image-container">
                                            <img id="image" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="preview-container d-flex align-center justify-content-center mt-2 mt-md-0" id="preview-container">
                                            <img id="preview-image" />
                                        </div>
                                    </div>
                                </div>
                                <input type="file" id="file" accept="image/*" />
                                <label class="cropper-label bg-info" for="file">Choose A Photo</label>
                                <p class="text-center">Selected image count <span id="count">0</span></p>
                                <div class="options-cropper d-none d-flex flex-column flex-md-row">
                                    <div class="inputs d-flex col-12 col-md-6">
                                        <input class="form-control"
                                        type="number"
                                        id="height-input"
                                        placeholder="Enter Height"
                                        max="780"
                                        />
                                        <input class="form-control"
                                        type="number"
                                        id="width-input"
                                        placeholder="Enter Width"
                                        max="780"
                                        />
                                    </div>
                                    <div class="buttons gap-1 col-12 col-md-6 mt-2 d-flex justify-content-center">
                                        <button class="aspect-ratio-button btn btn-secondary">16:9</button>
                                        <button class="aspect-ratio-button btn btn-secondary">4:3</button>
                                        <button class="aspect-ratio-button btn btn-secondary">1:1</button>
                                        <button class="aspect-ratio-button btn btn-secondary">2:3</button>
                                        <button class="aspect-ratio-button btn btn-secondary">Free</button>
                                    </div>
                                </div>
                                <div class="btns">
                                  <button id="preview" class="btn btn-primary btn-sm">Preview</button>
                                  <button id="select" class="btn btn-primary btn-sm">Select</button>
                                </div>
                              </div>
                        </div>
                        <div class="my-5">
                            <div id="images"></div>
                        </div>
                        <div class="mt-4 p-3">
                            <button type="" class="btn btn-warning" onclick="goBack()">Cancel</button>
                            <button class="btn btn-primary" onclick="addProduct(event)">Add Product</button>
                        </div>  

                    </div>
                </form>
            </div>  
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>    
    <script>

        ////// For the croping and saving the images \\\\\\
        let imageArray = []
        let fileInput = document.getElementById("file");
        let image = document.getElementById("image");
        let selectButton = document.getElementById("select");
        let aspectRatio = document.querySelectorAll(".aspect-ratio-button");
        const previewButton = document.getElementById("preview");
        const previewImage = document.getElementById("preview-image");
        const options = document.querySelector(".options-cropper");
        const widthInput = document.getElementById("width-input");
        const heightInput = document.getElementById("height-input");
        let imageContainer = document.getElementById("images")
        let preview = document.getElementById("preview-container")
        let count = document.getElementById("count")
        let cropper = "";
        let fileName = "";
        let imgSrc;
        let maxCount = 0

        fileInput.onchange = () => {
            previewImage.src = "";
            heightInput.value = 0;
            widthInput.value = 0;
            selectButton.classList.add("d-none");

            let reader = new FileReader();
            reader.readAsDataURL(fileInput.files[0]);

            reader.onload = () => {
                image.setAttribute("src", reader.result);
                if (cropper) {
                cropper.destroy();
                }
                cropper = new Cropper(image);
                options.classList.remove("d-none");
                previewButton.classList.remove("d-none");
            };
            fileName = fileInput.files[0].name.split(".")[0];
            };

            aspectRatio.forEach((element) => {
                element.addEventListener("click", () => {
                    if (element.innerText == "Free") {
                    cropper.setAspectRatio(NaN);
                    } else {
                    cropper.setAspectRatio(eval(element.innerText.replace(":", "/")));
                    }
                });
            });

            heightInput.addEventListener("input", () => {
                const { height } = cropper.getImageData();
                if (parseInt(heightInput.value) > Math.round(height)) {
                    heightInput.value = Math.round(height);
                }

                let newHeight = parseInt(heightInput.value);
                cropper.setCropBoxData({ height: newHeight });
            });

            widthInput.addEventListener("input", () => {
                const { width } = cropper.getImageData();
                if (parseInt(widthInput.value) > Math.round(width)) {
                    widthInput.value = Math.round(width);
                }

                let newWidth = parseInt(widthInput.value);
                cropper.setCropBoxData({ width: newWidth });
            });

            previewButton.addEventListener("click", (e) => {
                e.preventDefault();
                selectButton.classList.remove("d-none");
                imgSrc = cropper.getCroppedCanvas({}).toDataURL();
                previewImage.src = imgSrc;
                preview.classList.add("border")
                preview.classList.add("p-3")
                preview.classList.add("mx-2")
                selectButton.setAttribute("href", imgSrc);
            });

            selectButton.addEventListener("click",function(event){
                event.preventDefault()

                if(maxCount === 5){
                    swal.fire({
                        title: "Image limit",
                        text: "Sorry, you can only select 5 images.",
                        icon: "info",
                        timer: 2000,
                        timerProgressBar: true,
                        showConfirmButton: false
                    })
                    return false
                }
                
                let figure = document.createElement("figure");
                let img = document.createElement("img");
                img.setAttribute("src",imgSrc);
                
                let deleteButton = document.createElement("button");
                deleteButton.classList.add("delete-btn");
                deleteButton.innerHTML = "&times;";

                deleteButton.addEventListener('click', () => {
                    imageContainer.removeChild(figure);
                    imageArray = imageArray.filter(src => src !== imgSrc);
                });

                figure.appendChild(deleteButton);
                figure.appendChild(img);      
                imageContainer.appendChild(figure); 
                imageArray.push(imgSrc)
                maxCount++
                count.innerHTML = maxCount
            })

            window.onload = () => {
            selectButton.classList.add("d-none");
            options.classList.add("d-none");
            previewButton.classList.add("d-none");

            options.addEventListener("click",function(e){
                e.preventDefault()
            })
        };

        ////// fetch to send the form data \\\\\\
        function addProduct(e){
            e.preventDefault()
           
            const productName = document.getElementById("productName").value
            const productBrand = document.getElementById("productBrand").value
            const productCategory = document.getElementById("productCategory").value
            const productDescription = document.getElementById("productDescription").value
            const productColour = document.getElementById("productColour").value
            const productStock = document.getElementById("productStock").value
            const productRealPrice = document.getElementById("productRealPrice").value
            const productOfferPrice = document.getElementById("productOfferPrice").value
            const productDiscountPercentage = document.getElementById("productDiscountPercentage").value
            
            const formData = new FormData()
            formData.append("productName",productName)            
            formData.append("productBrand",productBrand)            
            formData.append("productCategory",productCategory)            
            formData.append("productDescription",productDescription)            
            formData.append("productColour",productColour)            
            formData.append("productStock",productStock)            
            formData.append("productRealPrice",productRealPrice)            
            formData.append("productOfferPrice",productOfferPrice)            
            formData.append("productDiscountPercentage",productDiscountPercentage)

            imageArray.forEach((imageDataUrl, index) => {
                let byteString = atob(imageDataUrl.split(',')[1]);
                let mimeString = imageDataUrl.split(',')[0].split(':')[1].split(';')[0];
                let ab = new ArrayBuffer(byteString.length);
                let ia = new Uint8Array(ab);
                for (let i = 0; i < byteString.length; i++) {
                    ia[i] = byteString.charCodeAt(i);
                }
                let blob = new Blob([ab], {type: mimeString});
                formData.append(`productImages`, blob, `image${index}.png`);
            });
            
            fetch("/admin/addProduct", {
                method: "POST",
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(()=>{
                        window.location.href = "/admin/products"
                    })
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while adding the product.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                console.error('Error:', error);
            });
        }

       ////// Cancel button goBack function \\\\\\
        function goBack() {
            window.location.href = '/admin/products'
        }

        ////// Validate product name \\\\\\
        function validateProductName() {
            const productNameInput = document.getElementById('productName');
            const productName = productNameInput.value.trim();
            const productNameError = document.getElementById('productNameError');

            const productNamePattern = /^[a-zA-Z0-9\s]+$/;

            if (productName === "") {
                productNameError.textContent = '';
                productNameInput.classList.remove('is-invalid');
                return false;
            }

            if (productName.length < 5 || productName.length > 20) {
                productNameInput.classList.add('is-invalid');
                productNameError.textContent = 'Name must be between 5 and 20 characters long.';
                return false;
            }

            if (!productNamePattern.test(productName)) {
                productNameInput.classList.add('is-invalid');
                productNameError.textContent = 'Name must contain only alphabets, digits, and spaces.';
                return false;
            } else { 
                productNameInput.classList.remove('is-invalid');
                productNameError.textContent = '';
                return true;
            }
        }

        ////// Validate product description \\\\\\
        function validateDesc() {
            const productDescInput = document.getElementById('productDescription');
            const productDesc = productDescInput.value.trim();
            const productDescError = document.getElementById('productDescError');

            const productDescPattern = /^[a-zA-Z0-9@_\-:,\/.%() ]{20,200}$/;

            if (productDesc === "") {
                productDescInput.classList.remove('is-invalid');
                productDescError.textContent = '';
                return false;
            }
            if (productDesc.length < 20 || productDesc.length > 200) {
                productDescInput.classList.add('is-invalid');
                productDescError.textContent = 'Description must between 20 and 200 characters long';
                return false;
            }
            if (!productDescPattern.test(productDesc)) {
                productDescInput.classList.add('is-invalid');
                productDescError.textContent = 'Name must contain only alphabets, digits and @_\-:,\/.%() characters.';
                return false;
            } else {
                productDescInput.classList.remove('is-invalid');
                productDescError.textContent = '';
                return true;
            }
        }

        ////// Validate product color \\\\\\
        function validateColor() {
            const productColorInput = document.getElementById('productColour');
            const productColor = productColorInput.value.trim();
            const productColorError = document.getElementById('productColorError');

            const productColorPattern = /^[a-zA-Z\s]{3,15}$/;

            if (productColor === "") {
                productColorInput.classList.remove('is-invalid');
                productColorError.textContent = '';
                return false;
            }
            if (productColor.length < 3 || productColor.length > 15) {
                productColorInput.classList.add('is-invalid');
                productColorError.textContent = 'Name must between 3 and 15 characters long';
                return false;
            }
            if (!productColorPattern.test(productColor)) {
                productColorInput.classList.add('is-invalid');
                productColorError.textContent = 'Name must contain only alphabets.';
                return false;
            } else {
                productColorInput.classList.remove('is-invalid');
                productColorError.textContent = '';
                return true;
            }
        }

        ////// Validate product stock \\\\\\
        function validateStock() {
            const productStockInput = document.getElementById('productStock');
            const productStock = productStockInput.value.trim();
            const productStockError = document.getElementById('productStockError');

            if (productStock === "") {
                productStockInput.classList.remove('is-invalid');
                productStockError.textContent = '';
                return false;
            }
            if (productStock < 1 || productStock > 10000) {
                productStockInput.classList.add('is-invalid');
                productStockError.textContent = 'Stock must between 1 and 10000.';
                return false;
            } else {
                productStockInput.classList.remove('is-invalid');
                productStockError.textContent = '';
                return true;
            }
        }

        ////// Validate product real price \\\\\\
        function validateRealPrice() {
            const productRealPriceInput = document.getElementById('productRealPrice');
            const productRealPrice = productRealPriceInput.value.trim();
            const productRealPriceError = document.getElementById('productRealPriceError');

            if (productRealPrice === "") {
                productRealPriceInput.classList.remove('is-invalid');
                productRealPriceError.textContent = '';
                return false;
            }
            if (productRealPrice < 500 || productRealPrice > 200000) {
                productRealPriceInput.classList.add('is-invalid');
                productRealPriceError.textContent = 'Real price must between 500 and 200000.';
                return false;
            } else {
                productRealPriceInput.classList.remove('is-invalid');
                productRealPriceError.textContent = '';
                return true;
            }
        }

        ////// Validate product offer price \\\\\\
        function validateOfferPrice() {
            const productOfferPriceInput = document.getElementById('productOfferPrice');
            const productOfferPrice = productOfferPriceInput.value.trim();
            const productOfferPriceError = document.getElementById('productOfferPriceError');

            if (productOfferPrice === "") {
                productOfferPriceInput.classList.remove('is-invalid');
                productOfferPriceError.textContent = '';
                return false;
            }
            if (productOfferPrice < 400 || productOfferPrice > 200000) {
                productOfferPriceInput.classList.add('is-invalid');
                productOfferPriceError.textContent = 'Offer price must between 400 and 200000.';
                return false;
            } else {
                productOfferPriceInput.classList.remove('is-invalid');
                productOfferPriceError.textContent = '';
                return true;
            }
        }

        ////// Validate product discount percentage \\\\\\
        function validateDiscount() {
            const productDiscountInput = document.getElementById('productDiscountPercentage');
            const productDiscount = productDiscountInput.value.trim();
            const productDiscountError = document.getElementById('productDiscountError');

            if (productDiscount === "") {
                productDiscountInput.classList.remove('is-invalid');
                productDiscountError.textContent = '';
                return false;
            }
            if (productDiscount < 1 || productDiscount >= 100) {
                productDiscountInput.classList.add('is-invalid');
                productDiscountError.textContent = 'Discount percentage must between 1 and 99.';
                return false;
            } else {
                productDiscountInput.classList.remove('is-invalid');
                productDiscountError.textContent = '';
                return true;
            }
        }
        
    </script>

<!-- Admin foter -->
<%-include("../adminpartials/admin_footer.ejs")%>